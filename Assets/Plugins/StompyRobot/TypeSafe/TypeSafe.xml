<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeSafe</name>
    </assembly>
    <members>
        <member name="T:TypeSafe.InputAxis">
            <summary>
            Wrapper for a Unity input axis
            </summary>
        </member>
        <member name="F:TypeSafe.InputAxis.Name">
            <summary>
            Name of the axis that can be passed to <c>Input.GetAxis(name)</c>.
            </summary>
        </member>
        <member name="P:TypeSafe.InputAxis.Value">
            <summary>
            The current value for this input axis.
            Equivalent to calling <c>Input.GetAxis</c>
            </summary>
        </member>
        <member name="P:TypeSafe.InputAxis.RawValue">
            <summary>
            The current raw value for this input axis.
            Equivalent to calling <c>Input.GetAxisRaw</c>
            </summary>
        </member>
        <member name="P:TypeSafe.InputAxis.IsPressed">
            <summary>
            The current pressed state for this input axis.
            Equivalent to calling <c>Input.GetButton</c>.
            </summary>
        </member>
        <member name="P:TypeSafe.InputAxis.Down">
            <summary>
            Was this button pressed down this frame.
            Equivalent to calling <c>Input.GetButtonDown</c>.
            </summary>
        </member>
        <member name="P:TypeSafe.InputAxis.Up">
            <summary>
            Was this button released this frame.
            Equivalent to calling <c>Input.GetButtonUp</c>.
            </summary>
        </member>
        <member name="M:TypeSafe.InputAxis.#ctor(System.String)">
            <summary>
            Create a new <c>InputAxis</c> object
            </summary>
        </member>
        <member name="M:TypeSafe.InputAxis.op_Implicit(TypeSafe.InputAxis)~System.String">
            <summary>
            Implicitly convert the <c>InputAxis</c> to a string that can be used in <c>Input.GetAxisX()</c> methods.
            </summary>
        </member>
        <member name="T:TypeSafe.Layer">
            <summary>
            Wrapper class for a Unity layer name/index combo.
            </summary>
        </member>
        <member name="P:TypeSafe.Layer.name">
            <summary>
            Name of the sorting layer, as might be passed to <c>LayerMask.NameToLayer</c>
            </summary>
        </member>
        <member name="P:TypeSafe.Layer.index">
            <summary>
            Layer number, as assigned to <c>gameObject.layer</c>
            </summary>
        </member>
        <member name="P:TypeSafe.Layer.mask">
            <summary>
            Layer mask, as might be passed to <c>Physics.Raycast</c>
            </summary>
        </member>
        <member name="M:TypeSafe.Layer.op_Implicit(TypeSafe.Layer)~System.Int32">
            <summary>
            Implicitly convert the <c>Layer</c> to an int that can be assigned to <c>gameObject.layer</c>;
            </summary>
        </member>
        <member name="M:TypeSafe.Layer.#ctor(System.String,System.Int32)">
            <summary>
            Create a new <c>Layer</c> object.
            </summary>
        </member>
        <member name="T:TypeSafe.PrefabResource">
            <summary>
            Specialized Resource for prefabs.
            </summary>
        </member>
        <member name="M:TypeSafe.PrefabResource.#ctor(System.String,System.String)">
            <summary>
            Create a PrefabResource instance.
            </summary>
            <param name="name"></param>
            <param name="path"></param>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate">
            <summary>
            Instantiate a new instance of this prefab and return the result.
            </summary>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate(UnityEngine.Transform)">
            <summary>
            Instantiate a new instance of this prefab with <paramref name="parent"/>.
            </summary>
            <param name="parent">The transform the object will be parented to.</param>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate(UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate a new instance of this prefab with <paramref name="parent"/>.
            </summary>
            <param name="parent">The transform the object will be parented to.</param>
            <param name="worldPositionStays">If when assigning the parent the original world position should be maintained.</param>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiate a new instance of this prefab at position and rotation and return the result.
            </summary>
            <param name="position">Position for the new object.</param>
            <param name="rotation">Orientation of the new object.</param>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate(UnityEngine.Vector3)">
            <summary>
            Instantiate a new instance of this prefab at <paramref name="position"/> and return the result.
            </summary>
            <param name="position">Position for the new object.</param>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="M:TypeSafe.PrefabResource.Instantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Instantiate a new instance of this prefab at <paramref name="position"/>, with <paramref name="rotation"/> and <paramref name="parent"/>.
            </summary>
            <param name="position">Position for the new object.</param>
            <param name="rotation">Orientation of the new object.</param>
            <param name="parent">The transform the object will be parented to.</param>
            <returns>Newly instantiated object.</returns>
        </member>
        <member name="T:TypeSafe.IResource">
            <summary>
            Represents a generic Unity Resource
            </summary>
        </member>
        <member name="P:TypeSafe.IResource.Type">
            <summary>
            Type of the resource
            </summary>
        </member>
        <member name="P:TypeSafe.IResource.Name">
            <summary>
            Name of the resource (ie when calling unityObject.name)
            </summary>
        </member>
        <member name="P:TypeSafe.IResource.Path">
            <summary>
            Path string that is passed to Resources.Load(...) to load this resource object.
            </summary>
        </member>
        <member name="M:TypeSafe.IResource.Load">
            <summary>
            Get the object for this resource. If the resource has not been loaded before, this will block until it is loaded.
            Subsequent calls to this method will return the cached reference to the resource.
            </summary>
            <returns>The resource object.</returns>
        </member>
        <member name="M:TypeSafe.IResource.Unload">
            <summary>
            Unload the resource from memory and clear the cached reference.
            </summary>
        </member>
        <member name="T:TypeSafe.Resource`1">
            <summary>
            A type-safe reference to a unity object in the Resources folder.
            </summary>
            <typeparam name="TResource">Unity Object type of this resource</typeparam>
        </member>
        <member name="P:TypeSafe.Resource`1.Type">
            <summary>
            Type of resource pointed to.
            </summary>
        </member>
        <member name="P:TypeSafe.Resource`1.Name">
            <summary>
            Name of the resource (ie when calling unityObject.name)
            </summary>
        </member>
        <member name="P:TypeSafe.Resource`1.Path">
            <summary>
            Path string that is passed to Resources.Load(...) to load this resource object.
            </summary>
        </member>
        <member name="P:TypeSafe.Resource`1.IsLoaded">
            <summary>
            True if the resource has been loaded.
            </summary>
        </member>
        <member name="M:TypeSafe.Resource`1.#ctor(System.String,System.String)">
            <summary>
            Constructs a Resource pointer object with the given path
            </summary>
            <param name="name">Name of the resource (from Object.name)</param>
            <param name="path">Path to pass to Unity Resources.Load that will load this resource.</param>
        </member>
        <member name="M:TypeSafe.Resource`1.Load">
            <summary>
            Get the object for this resource. If the resource has not been loaded before, this will block until it is loaded.
            Subsequent calls to this method will return the cached reference to the resource.
            </summary>
            <seealso cref="M:TypeSafe.Resource`1.LoadAsync"/>
            <returns>Resource of type <typeparamref name="TResource"/></returns>
        </member>
        <member name="M:TypeSafe.Resource`1.Unload">
            <summary>
            Unload the resource from memory and clear the cached reference.
            </summary>
        </member>
        <member name="M:TypeSafe.Resource`1.LoadAsync">
            <summary>
            Returns a <see cref="T:UnityEngine.ResourceRequest"/> object that can be used in a yield operation. 
            The resource will be loaded in a background thread. Calling Load() or IsLoaded will block until async load
            is completed.
            </summary>
            <example>
            IEnumerator LoadCoroutine() {
                yield return SRResources.SomeResource.LoadAsync();
                Debug.Log("Loaded SomeResource");
            }
            </example>
            <seealso cref="M:TypeSafe.Resource`1.Load"/>
            <returns></returns>
        </member>
        <member name="M:TypeSafe.Resource`1.op_Implicit(TypeSafe.Resource{`0})~`0">
            <summary>
            Implicitly convert the resource to the Unity type, loading it if necessary.
            </summary>
        </member>
        <member name="M:TypeSafe.Resource`1.ToString">
            <summary>
            Return a formatted string describing this resource pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TypeSafe.Resource`1.BlockOnAsync">
            <summary>
            If there is an async request in progress, block and assign it the reference fields
            </summary>
        </member>
        <member name="T:TypeSafe.Scene">
            <summary>
            Wrapper class for a Unity Scene name/index combo.
            </summary>
        </member>
        <member name="P:TypeSafe.Scene.name">
            <summary>
            Name of the scene, as it is passed to Application.LoadLevel(string)
            </summary>
        </member>
        <member name="P:TypeSafe.Scene.index">
            <summary>
            Scene index, as usually passed to Application.LoadLevel(int)
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.op_Implicit(TypeSafe.Scene)~System.Int32">
            <summary>
            Implicitly convert the Scene to an int that can be passed to Application.LoadLevel(int)
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.#ctor(System.String,System.Int32)">
            <summary>
            Create a new Scene object.
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.Load">
            <summary>
            Calls <c>Application.LoadLevel(...)</c>.
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.LoadAdditive">
            <summary>
            Calls <c>Application.LoadLevelAdditive(...)</c>.
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.LoadAdditiveAsync">
            <summary>
            Calls <c>Application.LoadLevelAdditiveAsync(...)</c>.
            </summary>
        </member>
        <member name="M:TypeSafe.Scene.LoadAsync">
            <summary>
            Calls <c>Application.LoadLevelAsync(...)</c>.
            </summary>
        </member>
        <member name="T:TypeSafe.SortingLayer">
            <summary>
            Wrapper class for a Unity sorting layer name/id combo.
            </summary>
        </member>
        <member name="P:TypeSafe.SortingLayer.name">
            <summary>
            Name of the sorting layer, as assigned to <c>SpriteRenderer.sortingLayerName</c>
            </summary>
        </member>
        <member name="P:TypeSafe.SortingLayer.id">
            <summary>
            Unique ID, as assigned to <c>SpriteRenderer.sortingLayerID</c>
            </summary>
        </member>
        <member name="M:TypeSafe.SortingLayer.op_Implicit(TypeSafe.SortingLayer)~System.Int32">
            <summary>
            Implicitly convert the <c>SortingLayer</c> to an int that can be assigned to <c>SpriteRenderer.sortingLayerId</c>;
            </summary>
        </member>
        <member name="M:TypeSafe.SortingLayer.op_Implicit(TypeSafe.SortingLayer)~System.String">
            <summary>
            Implicitly convert the <c>SortingLayer</c> object to a string that can be assigned to <c>SpriteRenderer.sortingLayerName</c>;
            </summary>
        </member>
        <member name="M:TypeSafe.SortingLayer.#ctor(System.String,System.Int32)">
            <summary>
            Create a new <c>SortingLayer</c> object.
            </summary>
        </member>
        <member name="T:TypeSafe.TypeSafeUtil">
            <summary>
            Util methods used by TypeSafe at runtime.
            </summary>
        </member>
        <member name="M:TypeSafe.TypeSafeUtil.GetResourcesOfType``1(System.Collections.Generic.IList{TypeSafe.IResource})">
            <summary>
            Return a list of all resources that are assignable from <typeparamref name="TResource"/> in <paramref name="resources"/>.
            </summary>
            <typeparam name="TResource">Type of resource to return.</typeparam>
            <param name="resources">List of resources to check.</param>
            <returns>New list instance containing matching resources.</returns>
        </member>
        <member name="M:TypeSafe.TypeSafeUtil.UnloadAll(System.Collections.Generic.IList{TypeSafe.IResource})">
            <summary>
            Call Unload() on all resources in list
            </summary>
        </member>
    </members>
</doc>
