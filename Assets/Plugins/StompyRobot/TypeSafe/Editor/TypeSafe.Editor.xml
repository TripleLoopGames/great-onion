<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeSafe.Editor</name>
    </assembly>
    <members>
        <member name="M:TypeSafe.Editor.Compiler.ResourceCompilerUtil.GetIResourceType">
            <summary>
            Get a CodeTypeReference object to the TypeSafe.IResource class
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.ResourceCompilerUtil.GetResourceType(System.Type)">
            <summary>
            Get a CodeTypeReference object to the TypeSafe.Resource[T] class where T is <paramref name="t" />.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.ResourceCompilerUtil.GetIResourceReadOnlyCollectionType">
            <summary>
            Get a CodeTypeReference object to the ReadOnlyCollection type with IResource as the param type
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.ResourceCompilerUtil.GetIResourceIListType">
            <summary>
            Get a CodeTypeReference object to the IList interface with IResource as the param type
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.ResourceCompilerUtil.GetIResourceListType">
            <summary>
            Get a CodeTypeReference object to the List[IResource] type
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.ReduceUnicodeNumbers(System.String)">
            <summary>
            Transform any Unicode numbers to ASCII digits
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.ReduceNonMonoCharacters(System.String)">
            <summary>
            Remove any Unicode characters that aren't supported by Mono
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.CreateStaticType(System.String)">
            <summary>
            Create the standard static type container
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.AddTypeSafeTag(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Tag a class declaration with the TypeSafe internal tag, used for determining if a type was created by TypeSafe in
            the editor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.GetGlobalScopeTypeReference(System.Type)">
            <summary>
            Get a CodeTypeReference object for type <paramref name="t" /> with every reference using the global:: syntax to
            prevent
            naming conflicts.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:TypeSafe.Editor.Compiler.CompilerUtil.SetTypeGlobalReference(System.CodeDom.CodeTypeReference)">
            <summary>
            Set every reference in <paramref name="typeRef" /> to use a global reference.
            </summary>
            <param name="typeRef"></param>
        </member>
        <member name="M:TypeSafe.Editor.PathUtility.IsTypeSafePath(System.String)">
            <summary>
            Determines if a path is part of TypeSafe
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:TypeSafe.Editor.ScanController.MaxUpdateProcessingTime">
            <summary>
            Max time the scanner can take per update
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.ScanController.ItemsCompleted">
            <summary>
            Number of items in the current operation completed
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.ScanController.TotalItems">
            <summary>
            Total number of items to process in the current operation
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.TypeSafeApi">
            <summary>
            Methods exposed for public access to allow for invoking TypeSafe via editor scripts
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.TypeSafeApi.Settings">
            <summary>
            Accessors for public TypeSafe settings
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeApi.Settings.AutoRebuild">
            <summary>
            Enable automatic rebuild when changes are detected to the project.
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeApi.Settings.IncludeNonActiveScenes">
            <summary>
            Include scenes listed in the build settings window that are 'unchecked'
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeApi.IsBusy">
            <summary>
            True if TypeSafe is currently scanning or compiling.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.QueueRefresh">
            <summary>
            Queue a new scan/compile process. Will do nothing and print a warning if <c>IsBusy</c> is true.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.Cancel">
            <summary>
            If a TypeSafe scan is currently in progress, cancel it.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.FormatTypeName(System.String)">
            <summary>
            Format a string with the class prefix/suffix specified in the Settings window.
            </summary>
            <param name="baseName"></param>
            <returns>A string in the format {prefix}{baseName}{suffix}</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.OpenSettingsWindow">
            <summary>
            Open the TypeSafe settings window.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.OpenWelcomeWindow">
            <summary>
            Open the TypeSafe welcome window.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeApi.ClearAssetTypeCache">
            <summary>
            Clear the internal cache of custom asset types
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeController.ItemsCompleted">
            <summary>
            Number of items in the current operation completed
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeController.TotalItems">
            <summary>
            Total number of items to process in the current operation
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeController.BuildTimeElapsed">
            <summary>
            Amount of time that has passed during the current build.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeController.Refresh(System.Boolean)">
            <summary>
            Cancel any current operations and queue a new scan from scratch
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeController.Queue(System.Boolean)">
            <summary>
            Queue a scan.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeController.Cancel">
            <summary>
            Cancel any current operations
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.TypeSafeDataEntry">
            <summary>
            A data entry within a <c>TypeSafeDataUnit</c>
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeDataEntry.#ctor(System.String,System.Object[])">
            <summary>
            Create a new data entry
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataEntry.PropertyName">
            <summary>
            String used as property name of the generated entry. Will be filtered through reserved name
            and C# compliance checks
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataEntry.Parameters">
            <summary>
            The array of parameters passed to the data type constructor.
            If the data type is a primitive or string, this should have one entry
            of the exact same type.
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.TypeSafeDataUnit">
            <summary>
            Class describing a data set used by TypeSafe for code generation.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeDataUnit.#ctor(System.String,System.Type)">
            <summary>
            Create a new data unit
            </summary>
            <param name="className">See <c>TypeSafeDataUnit.ClassName</c></param>
            <param name="dataType">See <c>TypeSafeDataUnit.DataType</c></param>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeDataUnit.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{TypeSafe.Editor.TypeSafeDataEntry},System.Boolean,System.String)">
            <summary>
            Create a new data unit
            </summary>
            <param name="className">See <c>TypeSafeDataUnit.ClassName</c></param>
            <param name="dataType">See <c>TypeSafeDataUnit.DataType</c></param>
            <param name="data">See <c>TypeSafeDataUnit.Data</c></param>
            <param name="enableAllProperty">See <c>TypeSafeDataUnit.EnableAllProperty</c></param>
            <param name="fileName">See <c>TypeSafeDataUnit.FileName</c></param>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.ClassName">
            <summary>
            Class name that TypeSafe will use for your generated class.
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.FileName">
            <summary>
            The name of the file the generated class will be placed in. (Setting to YourName will result in
            YourName.Generated.cs).
            If null, ClassName will be used. Ignored if this is a nested data unit.
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.DataType">
            <summary>
            The Type of the data in your set. This should be a primitive, string or read-only class/struct in your own code.
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.Data">
            <summary>
            The data used to populate your generated class
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.NestedUnits">
            <summary>
            Data units that will be nested in this unit.
            </summary>
        </member>
        <member name="P:TypeSafe.Editor.TypeSafeDataUnit.EnableAllProperty">
            <summary>
            If true, a property will be generated called "All" that will be a list of all the entries in your data set.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.GetTypeSafeClassNames">
            <summary>
            Get a list of base class names used by TypeSafe
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.ShouldBeOperating">
            <summary>
            Check if TypeSafe should be scanning or compiling with the current Unity Editor state.
            </summary>
            <returns>True if operating is permitted, otherwise false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.GetShortErrorMessage(System.String)">
            <summary>
            Given a long error message in the format "{0} - {1}", return only {0}.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.DeployBuildArtifacts(System.Collections.Generic.ICollection{System.String},System.Int32@,System.Boolean)">
            <summary>
            Copy a collection of file paths to the deploy path and refresh the Unity asset database for the target files.
            This will check for file changes before copying to reduce unnecessary recompiles.
            </summary>
            <param name="paths">Collection of paths to deploy.</param>
            <param name="fileCount">Number of files that have been updated.</param>
            <param name="dryRun">If true, skip the actual copying of the file, just check for differences</param>
            <returns>True if successfully deployed.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.Clean">
            <summary>
            Remove all generated files from the Unity project directory
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.IsTypeSafeGenerated(System.Type)">
            <summary>
            Determine if a type was generated by TypeSafe.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if generated by TypeSafe, otherwise false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.ValidateTypeName(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Perform a full validation check on a type name, including checking for conflicts with existing non-TypeSafe
            classes.
            </summary>
            <param name="className">The 'base' class name, e.g. 'Resources'</param>
            <param name="ns">The namespace that the class name will be placed in.</param>
            <param name="prefix">A prefix to apply to <paramref name="className" />, or null</param>
            <param name="suffix">A suffix to apply to <paramref name="className" />, or null</param>
            <param name="errorMessage">String will be populated with the error message if validation fails.</param>
            <returns>True if validation succeeds, otherwise false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.FilterTypeName(System.String)">
            <summary>
            Remove any characters that are forbidden in a type name.
            </summary>
            <param name="n">String to filter</param>
            <returns></returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.FilterNamespaceName(System.String)">
            <summary>
            Remove any characters that are forbidden in a namespace name.
            </summary>
            <param name="n">String to filter</param>
            <returns></returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.ValidateTypeName(System.String,System.String@)">
            <summary>
            Perform validation on a string as a type name.
            </summary>
            <param name="n">Type name to validate</param>
            <param name="errorMessage">String to be filled with the error message if validation failed.</param>
            <returns>True if validation succeeded, overwise false. <paramref name="errorMessage" /> contains the error if false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.ValidateNamespaceName(System.String,System.String@)">
            <summary>
            Perform validation on a string as a namespace name.
            </summary>
            <param name="n">Namespace to validate</param>
            <param name="errorMessage">String to be filled with the error message if validation failed.</param>
            <returns>True if validation succeeded, overwise false. <paramref name="errorMessage" /> contains the error if false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.FindType(System.String)">
            <summary>
            Find a type by name in any assemblies loaded in the current AppDomain
            </summary>
            <param name="qualifiedTypeName">Type name to search for</param>
            <returns>The found <c>Type</c>, or null if not found.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.EnsureCorrectUnityVersion">
            <summary>
            Checks that the current Unity version matches the version this assembly was compiled for. Will print a warning if
            mismatch.
            </summary>
            <returns>True if matches, otherwise false.</returns>
        </member>
        <member name="M:TypeSafe.Editor.TypeSafeUtil.HasGeneratedBefore">
            <summary>
            Returns true if TypeSafe has performed a generation and the artifacts exist in the project.
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.Unity.ProgressIndicationController">
            <summary>
            Handles displaying TypeSafe state to the user
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.Unity.UnityUtility.IsUserAssemblyType(System.Type)">
            <summary>
            Checks if a Type is defined in one of the Unity-generated user assemblies.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:TypeSafe.Editor.Unity.UnityUtility.IsEditorType(System.Type)">
            <summary>
            Check if type is defined in an editor assembly
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:TypeSafe.Editor.Unity.UserInteraction">
            <summary>
            Class containing all interaction from the user to TypeSafe (menus etc)
            </summary>
        </member>
        <member name="T:TypeSafe.Editor.ITypeSafeDataSource">
            <summary>
            Interface for a class that can provide a <c>TypeSafeDataUnit</c> to TypeSafe. Any non-abstract classes
            inheriting from this interface will be automatically instantiated by TypeSafe.
            </summary>
        </member>
        <member name="M:TypeSafe.Editor.ITypeSafeDataSource.GetTypeSafeDataUnit">
            <summary>
            Called by TypeSafe during the scan process. Return a <c>TypeSafeDataUnit</c> object describing your custom data.
            </summary>
            <returns>A <c>TypeSafeDataUnit</c> object describing your custom data</returns>
        </member>
        <member name="M:TypeSafe.Editor.Data.ResourceDatabase.Validate">
            <summary>
            Perform validation on the database, ensuring there are no duplicates or resources with the same name as folders.
            </summary>
        </member>
        <member name="F:TypeSafe.Editor.Settings.AudioMixers">
            <summary>
            List of AudioMixers GUIDs
            </summary>
        </member>
        <member name="F:TypeSafe.Editor.Settings.Animators">
            <summary>
            List of AnimatorControllers GUIDs
            </summary>
        </member>
    </members>
</doc>
